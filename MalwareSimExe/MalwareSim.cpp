#include "stdafx.h"
#include <iostream>
#include <string>
#include <Windows.h>
#include <WinInet.h>
#include <iostream>
#include <string>


#include <fstream> //write to file
#include <algorithm>    // find
#include <sstream>  //convert wstring to int

#include "mimikatz.h" // dummy header to trigger AV


#define  INTERNET_SERVICE_HTTP 3
#define GET 0

#pragma comment (lib, "wininet.lib")
using namespace std;

string HttpRequestExtended(wstring url);

int main(int argc, char *argv[])
{


// strings which may trigger AV Softwares
	wcout << L"\n"
		L"  .#####.   2.0 alpha (x86) release \"Kiwi en C\" (Apr  6 2014 22:02:03)\n"
		L" .## ^ ##. \"A La Vie, A L\'Amour \"\n"
		L" ## / \\ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )\n"
		L" ## \\ / ##       > https://blog.gentilkiwi.com/mimikatz\n"
		L" '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )\n"
		L"  '#####'        > https://pingcastle.com / https://mysmartlogon.com ***/\n";
	
	
	wcout << L"\n" MIMIKATZ << L"(" << MIMIKATZ_AUTO_COMMAND_STRING << L") # ";
	

	wcout << L"mimikatz, MIMIKATZand Mimikatz"
		L"DELPY, Benjamin, benjamin@gentilkiwi.com"
		L"creativecommons"
		L"gentilkiwi"
		L"KIWI, Kiwiand kiwi";

	cout << "\n"
		"  .#####.   2.0 alpha (x86) release \"Kiwi en C\" (Apr  6 2014 22:02:03)\n"
		" .## ^ ##. \"A La Vie, A L\'Amour \"\n"
		" ## / \\ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )\n"
		" ## \\ / ##       > https://blog.gentilkiwi.com/mimikatz\n"
		" '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )\n"
		"  '#####'        > https://pingcastle.com / https://mysmartlogon.com ***/\n";


	cout << "\n" MIMIKATZ << "(" << MIMIKATZ_AUTO_COMMAND_STRING << ") # ";


	cout << endl<<"mimikatz, MIMIKATZand Mimikatz" << endl << "DELPY, Benjamin, benjamin@gentilkiwi.com" << endl << "creativecommons" << endl << "gentilkiwi" << endl << "KIWI, Kiwiand kiwi";


	wcout << "\n"
	L"debug",		L"Ask debug privilege"
	L"driver",		L"Ask load driver privilege"
	L"security",	L"Ask security privilege"
	L"tcb",			L"Ask tcb privilege"
	L"backup",		L"Ask backup privilege"
	L"restore",		L"Ask restore privilege"
	L"sysenv",		L"Ask system environment privilege"
	L"id",			L"Ask a privilege by its id"
	L"name", L"Ask a privilege by its name";

	string windowsLocalEnum[] = {
	"net config Workstation",
	"systeminfo",
	"hostname",
	"net users",
	"ipconfig /all",
	"route print",
	"arp -A",
	"netstat -ano",
	"netsh firewall show state",
	"netsh firewall show config",
	"schtasks /query /fo LIST /v",
	"tasklist /SVC",
	"net start",
	"DRIVERQUERY",
	"reg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer\\AlwaysInstallElevated",
	"reg query HKCU\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer\\AlwaysInstallElevated",
	"nslookup www.google.com"
	};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
	string aszEmbeddedRules[] =
	{
		"Function prolog signature:10:558bec83c4",
		"Function prolog signature:10:558bec81ec",
		"Function prolog signature:10:558beceb",
		"Function prolog signature:10:558bece8",
		"Function prolog signature:10:558bece9",
		"Indirect function call tris:10:FFB7(B;\?\?\?\?\?\?\?\?)(B;\?\?\?\?\?\?\?\?)(B;\?\?\?\?\?\?\?\?)(B;\?\?\?\?\?\?\?\?)FF57(B;\?\?\?\?\?\?\?\?)",
		"GetEIP method 4 FLDZ/FSTENV [esp-12]:10:D9EED97424F4(B;01011\?\?\?)",
		"GetEIP method 1:10:E800000000(B;01011\?\?\?)",
		"GetEIP method 2:10:EB(J;1)E8(J;4)(B;01011\?\?\?)",
		"GetEIP method 3:10:E9(J;4)E8(J;4)(B;01011\?\?\?)",
		"GetEIP method 4:10:D9EE9BD97424F4(B;01011\?\?\?)",
		"Find kernel32 base method 1:10:648B(B;00\?\?\?101)30000000",
		"Find kernel32 base method 1bis:10:64A130000000",
		"Find kernel32 base method 2:10:31(B;11A\?\?A\?\?)(B;10100A\?\?)30648B(B;00B\?\?A\?\?)",
		"Find kernel32 base method 3:10:6830000000(B;01011A\?\?)648B(B;00B\?\?A\?\?)",
		"Structured exception handling :10:648B(B;00\?\?\?101)00000000",
		"Structured exception handling bis:10:64A100000000",
		"API Hashing:10:AC84C07407C1CF0D01C7EBF481FF",
		"API Hashing bis:10:AC84C07407C1CF0701C7EBF481FF",
				"Indirect function call:10:FF75(B;A\?\?\?\?\?\?\?)FF55(B;A\?\?\?\?\?\?\?)",
				"Indirect function call bis:10:FFB5(B;A\?\?\?\?\?\?\?)(B;B\?\?\?\?\?\?\?)(B;C\?\?\?\?\?\?\?)(B;D\?\?\?\?\?\?\?)FF95(B;A\?\?\?\?\?\?\?)(B;B\?\?\?\?\?\?\?)(B;C\?\?\?\?\?\?\?)(B;D\?\?\?\?\?\?\?)",
				"OLE file magic number:10:D0CF11E0",
				"Suspicious strings:2:str=UrlDownloadToFile",
				"Suspicious strings:2:str=GetTempPath",
				"Suspicious strings:2:str=GetWindowsDirectory",
				"Suspicious strings:2:str=GetSystemDirectory",
				"Suspicious strings:2:str=WinExec",
				"Suspicious strings:2:str=ShellExecute",
				"Suspicious strings:2:str=IsBadReadPtr",
				"Suspicious strings:2:str=IsBadWritePtr",
				"Suspicious strings:2:str=CreateFile",
				"Suspicious strings:2:str=CloseHandle",
				"Suspicious strings:2:str=ReadFile",
				"Suspicious strings:2:str=WriteFile",
				"Suspicious strings:2:str=SetFilePointer",
				"Suspicious strings:2:str=VirtualAlloc",
				"Suspicious strings:2:str=GetProcAddr",
				"Suspicious strings:2:str=LoadLibrary",
	};


	string fileTypes[] = {
		".odt",".ods",".odp",".odm",".odb",".doc",".docx",".docm",".wps",".xls",".xlsx",".xlsm",".xlsb",".xlk",".ppt",".pptx",".pptm",
	".mdb",".accdb",".pst",".dwg",".dxf",".dxg",".wpd",".rtf",".wb2",".mdf",".dbf",".psd",".pdd",".eps",".ai",".indd",".cdr",".jpg",
	".jpe",".jpg",".dng",".3fr",".arw",".srf",".sr2",".bay",".crw",".cr2",".dcr",".kdc",".erf",".mef",".mrw",".nef",".nrw",".orf",
	".raf",".raw",".rwl",".rw2",".r3d",".ptx",".pef",".srw",".x3f",".der",".cer",".crt",".pem",".pfx",".p12",".p7b",".p7c",".pdf",".odc"
	};

	string seatBeltStrings[] = {
		"'Seatbelt.Commands.WindowsSearchIndexDTO",
	"Seatbelt.Commands.VerboseDTO",
	"Seatbelt.Commands.WarningDTO",
	"Seatbelt.Commands.DirectoryListDTO",
	"#Seatbelt.Commands.Windows.HotfixDTO",
	",Seatbelt.Commands.Windows.MicrosoftUpdateDTO",
	"#Seatbelt.Commands.Windows.DotNetDTO",
	"0Seatbelt.Commands.Windows.ExplorerRecentFilesDTO",
	"%Seatbelt.Commands.Windows.IdleTimeDTO",
	"%Seatbelt.Commands.Windows.ARPTableDTO",
	"'Seatbelt.Commands.Windows.NamedPipesDTO",
	")Seatbelt.Commands.Windows.NtlmSettingsDTO",
	"&Seatbelt.Commands.Windows.ProcessesDTO",
	"+Seatbelt.Commands.Windows.ProcessesOwnerDTO",
	".Seatbelt.Commands.Windows.PSSessionSettingsRTO",
	"/Seatbelt.Commands.Windows.RPCMappedEndpointsDTO",
	"+Seatbelt.Commands.Windows.ScheduledTasksDTO",
	"1Seatbelt.Commands.Windows.UserRightAssignmentsDTO",
	"*Seatbelt.Commands.Windows.RegistryValueDTO",
	"2Seatbelt.Commands.Windows.WindowsCredentialFileDTO",
	"(Seatbelt.Commands.Windows.TokenGroupsDTO",
	"1Seatbelt.Commands.Windows.LocalGroupMembershipDTO",
	"#Seatbelt.Commands.Windows.OSInfoDTO",
	"'Seatbelt.Commands.Windows.PowerShellDTO",
	"(Seatbelt.Commands.Windows.RDPSettingsDTO",
	"+Seatbelt.Commands.Windows.TcpConnectionsDTO",
	",Seatbelt.Commands.Windows.TokenPrivilegesDTO",
	"+Seatbelt.Commands.Windows.UdpConnectionsDTO",
	",Seatbelt.Commands.Windows.WindowsDefenderDTO",
	"-Seatbelt.Commands.Windows.WMIEventConsumerDTO",
	";Seatbelt.Commands.Windows.EventLogs.ProcessCreationEventDTO",
	"2Seatbelt.Commands.Windows.EventLogs.LogonEventsDTO",
	"6Seatbelt.Commands.Windows.EventLogs.PoweredOnEventsDTO",
	"NSeatbelt.Commands.Windows.EventLogs.ExplicitLogonEvents.ExplicitLogonEventsDTO",
	"1Seatbelt.Commands.HuntLolbasCommand+HuntLolbasDTO",
	"/Seatbelt.Commands.FileZillaCommand+FileZillaDTO",
	"9Seatbelt.Commands.McAfeeSiteListCommand+McAfeeSiteListDTO",
	"1Seatbelt.Commands.SuperPuttyCommand+SuperPuttyDTO",
	"7Seatbelt.Commands.PuttyHostKeysCommand+PuttyHostKeysDTO",
	"7Seatbelt.Commands.PuttySessionsCommand+PuttySessionsDTO",
	"9Seatbelt.Commands.SlackDownloadsCommand+SlackDownloadsDTO",
	"7Seatbelt.Commands.SlackPresenceCommand+SlackPresenceDTO",
	"5Seatbelt.Commands.AuditPoliciesCommand+AuditPolicyGPO",
	"5Seatbelt.Commands.CredentialGuardCommand+CredGuardDTO",
	"<Seatbelt.Commands.InterestingFilesCommand+InterestingFileDTO",
	"%Seatbelt.Commands.LAPSCommand+LapsDTO",
	"YSeatbelt.Commands.RemoteDesktopConnectionManagerCommand+RemoteDesktopConnectionManagerDTO",
	"DSeatbelt.Commands.Products.SlackWorkspacesCommand+SlackWorkspacesDTO",
	"CSeatbelt.Commands.Browser.ChromeBookmarksCommand+ChromeBookmarksDTO",
	"?Seatbelt.Commands.Browser.ChromeHistoryCommand+ChromeHistoryDTO",
	"ASeatbelt.Commands.Browser.FirefoxHistoryCommand+FirefoxHistoryDTO",
	"WSeatbelt.Commands.Browser.InternetExplorerFavoritesCommand+InternetExplorerFavoritesDTO",
	"WSeatbelt.Commands.Browser.InternetExplorerTypedUrlsCommand+InternetExplorerTypedURLsDTO",
	"ASeatbelt.Commands.Browser.ChromePresenceCommand+ChromePresenceDTO",
	"CSeatbelt.Commands.Browser.FirefoxPresenceCommand+FirefoxPresenceDTO",
	"@Seatbelt.Commands.Windows.OfficeMRUsCommand+OfficeRecentFilesDTO",
	"ESeatbelt.Commands.Windows.OutlookDownloadsCommand+OutlookDownloadsDTO",
	"CSeatbelt.Commands.Windows.AuditPolicyRegistryCommand+AuditPolicyDTO",
	"5Seatbelt.Commands.Windows.CredEnumCommand+CredEnumDTO",
	"7Seatbelt.Commands.Windows.AppLockerCommand+AppLockerDTO",
	"4Seatbelt.Commands.Windows.AutoRunsCommand+AutoRunDTO",
	"CSeatbelt.Commands.Windows.DpapiMasterKeysCommand+DpapiMasterKeysDTO",
	"KSeatbelt.Commands.Windows.EnvironmentVariableCommand+EnvironmentVariableDTO",
	"ESeatbelt.Commands.Windows.InternetSettingsCommand+InternetSettingsDTO",
	"?Seatbelt.Commands.Windows.LogonSessionsCommand+LogonSessionsDTO",
	"QSeatbelt.Commands.Windows.LocalSecurityAuthorityCommand+LocalSecurityAuthorityDTO",
	"MSeatbelt.Commands.Windows.InterestingProcessesCommand+InterestingProcessesDTO",
	"ISeatbelt.Commands.Windows.ExplorerRunCommandCommand+ExplorerRunCommandDTO",
	"ISeatbelt.Commands.Windows.RDPSavedConnectionCommand+RDPSavedConnectionDTO",
	"ISeatbelt.Commands.Windows.UserAccountControlCommand+UserAccountControlDTO",
	"QSeatbelt.Commands.Windows.WindowsEventForwardingCommand+WindowsEventForwardingDTO",
	"CSeatbelt.Commands.Windows.WindowsFirewallCommand+WindowsFirewallDTO",
	"=Seatbelt.Commands.Windows.WindowsVaultCommand+WindowsVaultDTO"

	};

	string incognito_strings[] = { "!This program cannot be run in DOS mode.",
	"FlsFree",
	"FlsSetValue",
	"FlsGetValue",
	"FlsAlloc",
	" !\"#$ % &'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~",
	"('8PW",
	"700PP",
	"`h`hhh",
	"xppwpp",
	" !\"#$ % &'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\]^_`abcdefghijklmnopqrstuvwxyz{|}~",
	" !\"#$ % &'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`ABCDEFGHIJKLMNOPQRSTUVWXYZ{|}~",
	"GetProcessWindowStation",
	"GetUserObjectInformationW",
	"GetLastActivePopup",
	"GetActiveWindow",
	"MessageBoxW",
	"WaitForSingleObject",
	"CreateThread",
	"SetHandleInformation",
	"CreatePipe",
	"GetStdHandle",
	"GetLastError",
	"WriteFile",
	"ReadFile",
	"Sleep",
	"ReleaseMutex",
	"CreateMutexA",
	"CreateSemaphoreA",
	"ReleaseSemaphore",
	"CloseHandle",
	"GetCurrentThread",
	"DuplicateHandle",
	"OpenProcess",
	"GetProcAddress",
	"GetModuleHandleA",
	"GetCurrentProcess",
	"GetCurrentProcessId",
	"DeleteFileA",
	"CopyFileA",
	"GetModuleFileNameA",
	"SetNamedPipeHandleState",
	"CreateFileA",
	"WaitNamedPipeA",
	"KERNEL32.dll",
	"CreateDesktopA",
	"SetProcessWindowStation",
	"CreateWindowStationA",
	"GetProcessWindowStation",
	"GetUserObjectInformationA",
	"USER32.dll",
	"CreateProcessAsUserA",
	"RevertToSelf",
	"ImpersonateLoggedOnUser",
	"LookupPrivilegeNameA",
	"GetTokenInformation",
	"OpenThreadToken",
	"OpenProcessToken",
	"SetTokenInformation",
	"DuplicateTokenEx",
	"CloseServiceHandle",
	"DeleteService",
	"StartServiceA",
	"OpenServiceA",
	"CreateServiceA",
	"OpenSCManagerA",
	"ControlService",
	"LookupAccountSidA",
	"LookupPrivilegeValueA",
	"AdjustTokenPrivileges",
	"ADVAPI32.dll",
	"StringFromGUID2",
	"CoCreateGuid",
	"ole32.dll",
	"WNetAddConnection2A",
	"WNetCancelConnection2A",
	"MPR.dll",
	"NetApiBufferFree",
	"NetShareEnum",
	"NetUserAdd",
	"NetGroupAddUser",
	"NetLocalGroupAddMembers",
	"NETAPI32.dll",
	"EnterCriticalSection",
	"LeaveCriticalSection",
	"HeapFree",
	"HeapReAlloc",
	"HeapAlloc",
	"WideCharToMultiByte",
	"DecodePointer",
	"EncodePointer",
	"SetConsoleCtrlHandler",
	"MultiByteToWideChar",
	"GetModuleHandleW",
	"ExitProcess",
	"GetCommandLineA",
	"HeapSetInformation",
	"IsProcessorFeaturePresent",
	"TerminateProcess",
	"UnhandledExceptionFilter",
	"SetUnhandledExceptionFilter",
	"IsDebuggerPresent",
	"SetHandleCount",
	"InitializeCriticalSectionAndSpinCount",
	"GetFileType",
	"GetStartupInfoW",
	"DeleteCriticalSection",
	"GetConsoleCP",
	"GetConsoleMode",
	"RtlUnwind",
	"GetCPInfo",
	"InterlockedIncrement",
	"InterlockedDecrement",
	"GetACP",
	"GetOEMCP",
	"IsValidCodePage",
	"TlsAlloc",
	"TlsGetValue",
	"TlsSetValue",
	"TlsFree",
	"SetLastError",
	"GetCurrentThreadId",
	"HeapCreate",
	"GetModuleFileNameW",
	"LoadLibraryW",
	"FreeEnvironmentStringsW",
	"GetEnvironmentStringsW",
	"QueryPerformanceCounter",
	"GetTickCount",
	"GetSystemTimeAsFileTime",
	"FlushFileBuffers",
	"SetFilePointer",
	"WriteConsoleW",
	"SetStdHandle",
	"LCMapStringW",
	"GetStringTypeW",
	"HeapSize",
	"CreateFileW",
	"SetEndOfFile",
	"GetProcessHeap",
	"[-] Stdout pipe creation failed",
	"[-] Stdin pipe creation failed",
	"incognito\default",
	"incognito",
	"default",
	"[-] Failed to create new process: %d",
	"%s / [Status] / ",
	" / [Status] / ",
	" / [Status] / ",
	"%s / %s",
	"=========================================================",
	"[-] WARNING: Not running as SYSTEM. Not all tokens will be available.",
	"Incognito v2.0, by Luke Jennings (0xlukej@gmail.com)",
	"MWR Labs project page: http://labs.mwrinfosecurity.com/research-projects/security-implications-of-windows-access-tokens/",
	"Usage:",
	"Whitepaper: http://labs.mwrinfosecurity.com/assets/142/mwri_security-implications-of-windows-access-tokens_2008-04-14.pdf",
	"%s [global options] COMMAND [options] arguments",
	"GLOBAL OPTIONS:",
	"	-h <host>	Operate on remote host",
	"	-f <filename>	Operate on remote hosts loaded from text file",
	"	-u <username>	Username to use remotely",
	"	-p <password>	Password to use remotely",
	"	-n <threads>	Max number of threads",
	"	-g 		Grepable output mode",
	"	-q 		Quiet mode (suppress status messages)",
	"COMMANDS:",
	"	list_tokens [options]	",
	"		-u	List by unique username",
	"		-g	List by unique groupname",
	"	execute [options] <token> <command>	",
	"		-c	Enable communication by console",
	"	snarf_hashes <sniffer_host>	",
	"	add_user [options] <username> <password>	",
	"		-h <host>	Add user to remote host",
	"	add_group_user [options] <groupname> <username>	",
	"		-h <host>	Add user to group on remote host",
	"	add_localgroup_user [options] <groupname> <username>	",
	"		-h <host>	Add user to group on remote host",
	"	cleanup",
	"TIPS:",
	"127.0.0.1",
	"	- Run as SYSTEM when using locally for domain privilege escalation",
	"	- Run as a standard user when using remotely (-h or -f global options)",
	"127.0.0.1",
	"	- Remember to enclose arguments with spaces in them within quotation marks",
	"f:h:u:p:n:gq",
	"[-] Unknown global option %s",
	"[-] %s option argument was not supplied",
	"cleanup",
	"[-] No arguments supplied to be passed to remote service",
	"[-] WARNING: Running as SYSTEM. This will fail as SYSTEM cannot authenticate remotely. Run as a standard user.",
	"[-] Invalid Filename",
	"[-] Please supply either both username and password or neither when connecting remotely",
	"list_tokens",
	"[-] Please supply either both username and password or neither when connecting remotely",
	"[-] WARNING: Not running as SYSTEM. Not all tokens will be available.",
	"[-] No list_tokens command options specified",
	"[-] Unknown list_tokens command option",
	"execute",
	"[-] Unknown execute command option",
	"[-] Not enough arguments supplied to execute command",
	"snarf_hashes",
	"[-] Not enough arguments supplied to snarf_hashes command",
	"add_user",
	"add_localgroup_user",
	"add_group_user",
	"[-] list_tokens %s option argument was not supplied",
	"[-] Unknown add_user command option",
	"[-] Not enough arguments supplied to command",
	"add_user",
	"add_localgroup_user",
	"add_group_user",
	"cleanup",
	"[-] cleanup command not valid in this context. Needs to be a remote connection",
	"[-] Unknown command %s",
	"\\%s",
	"[*] Finished snarfing hashes",
	"[-] Failed to enumerate tokens with error code: %d",
	"[*] Snarfing hashes...",
	"NT AUTHORITY",
	"[*] Finished snarfing hashes",
	"NtQuerySystemInformation",
	"NTDLL.DLL",
	"NtQueryObject",
	"NTDLL.DLL",
	"SeAssignPrimaryTokenPrivilege",
	"SeCreateTokenPrivilege",
	"SeTcbPrivilege",
	"SeTakeOwnershipPrivilege",
	"SeBackupPrivilege",
	"SeRestorePrivilege",
	"SeDebugPrivilege",
	"SeImpersonatePrivilege",
	"SeRelabelPrivilege",
	"SeLoadDriverPrivilege",
	"SeAssignPrimaryTokenPrivilege",
	"SeCreateTokenPrivilege",
	"SeTcbPrivilege",
	"SeTakeOwnershipPrivilege",
	"SeBackupPrivilege",
	"SeRestorePrivilege",
	"SeDebugPrivilege",
	"SeImpersonatePrivilege",
	"SeRelabelPrivilege",
	"SeLoadDriverPrivilege",
	"[*] Enumerating tokens",
	"[-] Failed to enumerate tokens with error code: %d",
	"[*] Listing unique users found",
	"Delegation Tokens Available",
	"============================================",
	"[Output] / [Delegation] / %s",
	"[-] No tokens available",
	"Impersonation Tokens Available",
	"============================================",
	"[Output] / [Impersonation] / %s",
	"[-] No tokens available",
	"Administrative Privileges Available",
	"============================================",
	"SeAssignPrimaryTokenPrivilege",
	"[Output] / [Privilege] / %s",
	"SeAssignPrimaryTokenPrivilege",
	"SeCreateTokenPrivilege",
	"[Output] / [Privilege] / %s",
	"SeCreateTokenPrivilege",
	"SeTcbPrivilege",
	"[Output] / [Privilege] / %s",
	"SeTcbPrivilege",
	"SeTakeOwnershipPrivilege",
	"[Output] / [Privilege] / %s",
	"SeTakeOwnershipPrivilege",
	"SeBackupPrivilege",
	"[Output] / [Privilege] / %s",
	"SeBackupPrivilege",
	"SeRestorePrivilege",
	"[Output] / [Privilege] / %s",
	"SeRestorePrivilege",
	"SeDebugPrivilege",
	"[Output] / [Privilege] / %s",
	"SeDebugPrivilege",
	"SeImpersonatePrivilege",
	"[Output] / [Privilege] / %s",
	"SeImpersonatePrivilege",
	"SeRelabelPrivilege",
	"[Output] / [Privilege] / %s",
	"SeRelabelPrivilege",
	"SeLoadDriverPrivilege",
	"[Output] / [Privilege] / %s",
	"SeLoadDriverPrivilege",
	"[-] No administrative privileges available",
	"None",
	"Everyone",
	"LOCAL",
	"NULL SID",
	"CONSOLE LOGON",
	"[*] Enumerating tokens",
	"[-] Failed to enumerate tokens with error code: %d",
	"[*] Searching for availability of requested token",
	"[+] Requested token found",
	"[+] Delegation token available",
	"[-] No Delegation token available",
	"[-] Requested token not found",
	"[-] Failed to duplicate token to primary token: %d",
	"WinSta0",
	"WinSta0\default",
	"[*] Attempting to create new child process and communicate via anonymous pipe",
	"[*] Returning from exited process",
	"[+] Created new process with token successfully",
	"[-] Failed to create new process: %d",
	"\\%s",
	"%s\IPC$",
	"[*] Attempting to establish new connection to %s",
	"[-] Logon to %s failed: error %d",
	"[+] Logon to %s succeeded",
	"[-] No username and password supplied",
	"[-] Unable to find writable share on %s",
	"[-] Unable to find a writable share on %s",
	"incognito_service.exe",
	"%s\%s",
	"[*] Copying service to %s",
	"incognito_service.exe",
	"\incognito_service.exe",
	"[-] File already exists",
	"[-] Couldn't copy %s to destination %s: %d",
	"[+] Copied service successfully",
	"[-] Failed to open service control manager",
	"[*] Creating incognito service on remote host",
	"Incognito Service",
	"incognito_service",
	"incognito_service",
	"[-] Failed to create service. Attempting to open pre-existing service: %d",
	"[-] Failed to open service: %d",
	"[+] Existing service found and opened successfully",
	"[+] Created service successfully",
	"[*] Starting service",
	"[-] Service start failed: %d",
	"[+] Service started",
	"[*] Deleting service",
	"%s\pipe\%s",
	"[*] Service shutdown detected. Service executable file deleted",
	"[*] Connecting to incognito service named pipe",
	"[-] Failed to create a new client-side pipe: error %d",
	"[-] Failed to create a new client-side pipe: error %d",
	"[+] Successfully connected to named pipe %s",
	"[*] Redirecting I/O to remote process",
	"[*] Caught interrupt signal",
	"[*] Advised to run cleanup command against hosts",
	"[-] Failed to stop service: %d",
	"ADMIN$",
	"SYSVOL",
	"NETLOGON",
	"%s\%s",
	"[-] Error accessing ADMIN$ share: %ld",
	"\\%s",
	"%s\IPC$",
	"[*] Attempting to establish new connection to %s",
	"[-] Logon to %s failed: error %d",
	"[+] Logon to %s succeeded",
	"[-] No username and password supplied",
	"[-] Unable to find writable share on %s",
	"[-] Unable to find a writable share on %s",
	"incognito_service.exe",
	"%s\%s",
	"[-] Failed to open service control manager",
	"incognito_service",
	"[-] Failed to open service: %d",
	"[*] Stopping and deleting incognito service on remote host",
	"incognito_service.exe",
	"\incognito_service.exe",
	"[*] Deleting service EXE %s",
	"[+] Successfully deleted %s",
	"[-] Couldn't delete %s: %d",
	"%s\%s",
	"%s\%s",
	"%s\%s",
	"NT AUTHORITY\SYSTEM",
	"SeImpersonatePrivilege",
	"SeImpersonatePrivilege",
	"SeImpersonatePrivilege",
	"SeAssignPrimaryTokenPrivilege",
	"SeDebugPrivilege",
	"SeAssignPrimaryTokenPrivilege",
	"[*] Enumerating tokens",
	"[-] Failed to enumerate tokens with error code: %d",
	"[*] Attempting to add user %s to host %s",
	"NT AUTHORITY\ANONYMOUS LOGON",
	"[+] Successfully added user",
	"[-] Computer name invalid",
	"[-] Operation only allowed on primary domain controller",
	"[-] Group already exists",
	"[-] User already exists",
	"[-] Password does not meet complexity requirements",
	"Unknown error: %d",
	"[-] Access denied with all tokens",
	"[*] Enumerating tokens",
	"[-] Failed to enumerate tokens with error code: %d",
	"[*] Attempting to add user %s to group %s on domain controller %s",
	"NT AUTHORITY\ANONYMOUS LOGON",
	"[+] Successfully added user to group",
	"[-] Computer name invalid",
	"[-] Operation only allowed on primary domain controller",
	"[-] Special group",
	"[-] User not found",
	"[-] Group not found",
	"[-] User already in group",
	"Unknown error: %d",
	"[-] Access denied with all tokens",
	"[*] Enumerating tokens",
	"[-] Failed to enumerate tokens with error code: %d",
	"[*] Attempting to add user %s to local group %s on host %s",
	"NT AUTHORITY\ANONYMOUS LOGON",
	"[+] Successfully added user to local group",
	"[-] Computer name invalid",
	"[-] User not found",
	"[-] Local group not found",
	"[-] User already in group",
	"Unknown error: %d",
	"[-] Access denied with all tokens",
							  "",
	"abcdefghijklmnopqrstuvwxyz",
	"ABCDEFGHIJKLMNOPQRSTUVWXYZ",
							  "",
	"abcdefghijklmnopqrstuvwxyz",
	"ABCDEFGHIJKLMNOPQRSTUVWXYZ",
	"0$0/040:0C0Z0a0l0q0w0",
	"061>1G1]1c1t1z1",
	"2^2e2",
	"3^3l3",
	"3&4.4=4Q4d4",
	"5)5h5}5",
	"6>6E6o6v6",
	"7+787I7V7c7p7}7",
	"8&838@8M8Z8g8t8",
	"9.9B9N9[9",
	"92:9:?:M:S:a:m:|:",
	"; ;,;B;O;a;n;",
	"<*<M<",
	"='=/=8=C=J=R=Y=^=f=l=s=",
	"> >1>>>M>`>k>}>",
	">(?:?]?r?",
	"0(0=0G0Y0y0",
	"1#101B1]1g1",
	"2)2O2`2v2",
	"3\"3 + 303C3J3P3Y3_3f3o3v3",
	"4-4m4",
	"4#5S5y5",
	"5	6K6",
	"878{8",
	"8&9?9z9",
	":\";I;p;",
	";	<-<Q<",
	">E>l>",
	"?)?M?y?",
	"	00060",
	"1P1e1",
	"202L2d2r2z2",
	"3,3G3O3T3c3~3",
	"4#4+404?4Z4b4g4v4",
	"606S6v6",
	";!<6<=<V<`<f<y<",
	"=-=K=S=`=",
	">K?[?",
	"0.0:0m0",
	"1W1i1u1",
	"2&2<2a2f2",
	"333Q3g3o3",
	"4'4P4U4Z4q4w4",
	"5+5:5H5d5}5",
	"6!6&676N6T6k6p6~6",
	"6(7A7v7",
	"818I8O8x8~8",
	"939A9W9\9r9",
	":G:Q:`:",
	";4;A;N;[;s;",
	";T<G=c=",
	">F?U?d?",
	"0-0l0",
	"1-1D1J1`1f1|1",
	"2$2:2c2",
	"3+383O3X3n3~3",
	"4>4~4",
	"5>5t5",
	"676z6",
	"9N9_9g9",
	":>:O:W:",
	":';N;U;_;m;u;",
	"<-<5<?<h<r<",
	">9>[>",
	"?+?:?M?a?",
	"161<1Z1",
	"3&3e3",
	"5#5{5",
	"7E7N7X7b7j7{7",
	"8)838?8L8X8]8e8k8t8z8",
	"9\"9'9 / 9 ? 9Y9f9",
	":\:.;",
	"<%<1<A<H<W<c<p<",
	"<,=;=D=h=",
	"4M5U5j5u5",
	"6J9P9b9J:|:",
	";$;(;,;0;4;8;<;@;",
	"<(</<4<8<<<]<",
	"<&=,=0=4=8=",
	">@>o>u>",
	"8\"8 = 8C8I8Z8`8f8",
	": :-:<:j:p:~:",
	";T<]<c<",
	"=5>t>|>",
	">J?R?e?p?u?",
	"0 010j0t0",
	"2R2W2a2",
	"4&4-444;4C4K4S4_4h4m4s4}4",
	"4\"545W6",
	"3272;2?2C2G2K2O2\2n2N3X3e3",
	"494L4",
	"6^6~6",
	"7 757|7",
	"8;8M8{8",
	"9#9/9h9q9}9",
	":9:F:K:Y:4;W;b;",
	"<\" < ,<> < U < c < i < ",
	"70W0G1p1",
	"5(5i5",
	"5%6W6",
	"7U8a8l9",
	":P;n;",
	"<A=i=",
	">$>+>;>M>R>",
	">8?O?",
	"1!1/181B1v1",
	"2Q2d2",
	"3=4I4\4n4",
	"585a5r5",
	"5!6i6",
	"7&8@8Q8",
	"9)9/9<9F9L9V9x9",
	"9#:):/:E:]:",
	": ;*;b;j;",
	"<!<-<2<7<=<A<G<L<R<W<f<|<",
	"2f2~2",
	"3F3c3",
	"667;7\7a7",
	"7H8M8_8}8",
	"8?9E9N9]9",
	";g<m<",
	"=@=M=Y=a=i=u=",
	"4?5w5",
	"6&6F6",
	"6#7P7[7",
	"7.8S8`8",
	"<&=3=",
	">\" ? J ? ",
	"a0m0",
	"2	3h5",
	"5S6f6",
	":K:r:",
	"k0;1",
	"1q2\\6n6",
	"7$767H7Z7l7~7",
	"7):L:W:]:m:r:",
	":-;G;a;H=O=U=",
	"2%2Q2",
	"2 2X2\\2",
	"0$0,040<0",
	":8;X;x;",
	"<8<T<X<x<",
	"= =@=`=",
	">0>P>p>",
	"? ?$?(?,?0?4?8?<?@?P?T?X?\?`?d?h?l?p?t?x?|?",
	"X0h0x0",
	"182<2@2D2H2L2P2T2X2\\2h2l2p2t2x2|2"
	};


	string meterpreterStrings[] = { "!This program cannot be run in DOS mode.",
	"!\"#$%&'()*+,-./0123@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
	"_iob",
	"fprintf",
	"strchr",
	"_pctype",
	"__mb_cur_max",
	"exit",
	"atoi",
	"_isctype",
	"printf",
	"signal",
	"malloc",
	"calloc",
	"fflush",
	"fclose",
	"perror",
	"fopen",
	"qsort",
	"_ftol",
	"strncpy",
	"strstr",
	"strncmp",
	"free",
	"_errno",
	"__p__wenviron",
	"__p__environ",
	"realloc",
	"strspn",
	"modf",
	"strerror",
	"wcscpy",
	"wcslen",
	"_close",
	"wcsncmp",
	"strrchr",
	"MSVCRT.dll",
	"__dllonexit",
	"_onexit",
	"_exit",
	"_XcptFilter",
	"__p___initenv",
	"__getmainargs",
	"_initterm",
	"__setusermatherr",
	"_adjust_fdiv",
	"__p__commode",
	"__p__fmode",
	"__set_app_type",
	"_except_handler3",
	"_controlfp",
	"SetLastError",
	"FreeEnvironmentStringsW",
	"GetEnvironmentStringsW",
	"GlobalFree",
	"GetCommandLineW",
	"TlsAlloc",
	"TlsFree",
	"DuplicateHandle",
	"GetCurrentProcess",
	"SetHandleInformation",
	"CloseHandle",
	"GetSystemTimeAsFileTime",
	"FileTimeToSystemTime",
	"GetTimeZoneInformation",
	"FileTimeToLocalFileTime",
	"SystemTimeToFileTime",
	"SystemTimeToTzSpecificLocalTime",
	"Sleep",
	"FormatMessageA",
	"GetLastError",
	"WaitForSingleObject",
	"CreateEventA",
	"SetStdHandle",
	"SetFilePointer",
	"CreateFileA",
	"CreateFileW",
	"GetOverlappedResult",
	"DeviceIoControl",
	"GetFileInformationByHandle",
	"LocalFree",
	"GetFileType",
	"CreateMutexA",
	"InitializeCriticalSection",
	"DeleteCriticalSection",
	"EnterCriticalSection",
	"ReleaseMutex",
	"SetEvent",
	"LeaveCriticalSection",
	"TerminateProcess",
	"GetExitCodeProcess",
	"GetVersionExA",
	"GetProcAddress",
	"LoadLibraryA",
	"WriteFile",
	"ReadFile",
	"PeekNamedPipe",
	"KERNEL32.dll",
	"AllocateAndInitializeSid",
	"FreeSid",
	"ADVAPI32.dll",
	"WSOCK32.dll",
	"WSASend",
	"WSARecv",
	"WS2_32.dll",
	"_strnicmp",
	"_strdup",
	"%s: Cannot use concurrency level greater than total number of requests",
	"%s: Invalid Concurrency [Range 0..%d]",
	"%s: invalid URL",
	"%s: wrong number of arguments",
	"User-Agent:",
	"Accept:",
	"Host:",
	"Proxy-Authorization: Basic",
	"Proxy credentials too long",
	"Authorization: Basic",
	"Authentication credentials too long",
	"Cookie:",
	"Cannot mix PUT and HEAD",
	"Cannot mix POST and HEAD",
	"Cannot mix POST/PUT and HEAD",
	"Invalid number of requests",
	"n:c:t:b:T:p:u:v:rkVhwix:y:z:C:H:P:A:g:X:de:Sq",
	"bgcolor=white",
	"Total of %d requests completed",
	"..done",
	"Finished %d requests",
	"apr_socket_connect()",
	"Test aborted after 10 failures",
	"Server timed out",
	"apr_poll",
	"apr_sockaddr_info_get() for %s",
	"error creating request buffer: out of memory",
	"INFO: %s header ==",
	"Request too long",
	"%s %s HTTP/1.0",
	"%s%s%sContent-length: %u",
	"Content-type: %s",
	"POST",
	"text/plain",
	"%s %s HTTP/1.0",
	"%s%s%s%s",
	"HEAD",
	"Connection: Keep-Alive",
	"Accept: */*",
	"User-Agent: ApacheBench/",
	"Host:",
	"apr_pollset_create failed",
	"(be patient)%s",
	"[through %s:%d]",
	"Benchmarking %s",
	"%s: %s (%d)",
	"Send request failed!",
	"Send request timed out!",
	"%s      %I64d   %I64d   %I64d   %I64d   %I64d",
	"starttime       seconds ctime   dtime   ttime   wait",
	"Cannot open gnuplot output file",
	"%d,%.3f",
	"Percentage served,Time in ms",
	"Cannot open CSV output file",
	"  %d%%  %5I64d",
	" 100%%  %5I64d (longest request)",
	" 0%%  <0> (never)",
	"Percentage of the requests served within a certain time (ms)",
	"Total:      %5I64d %5I64d%5I64d",
	"Processing: %5I64d %5I64d%5I64d",
	"Connect:    %5I64d %5I64d%5I64d",
	"              min   avg   max",
	"WARNING: The median and mean for the total time are not within a normal deviation",
	"        These results are probably not that reliable.",
	"ERROR: The median and mean for the total time are more than twice the standard",
	"       deviation apart. These results are NOT reliable.",
	"WARNING: The median and mean for the waiting time are not within a normal deviation",
	"        These results are probably not that reliable.",
	"ERROR: The median and mean for the waiting time are more than twice the standard",
	"       deviation apart. These results are NOT reliable.",
	"WARNING: The median and mean for the processing time are not within a normal deviation",
	"        These results are probably not that reliable.",
	"ERROR: The median and mean for the processing time are more than twice the standard",
	"       deviation apart. These results are NOT reliable.",
	"WARNING: The median and mean for the initial connection time are not within a normal deviation",
	"        These results are probably not that reliable.",
	"ERROR: The median and mean for the initial connection time are more than twice the standard",
	"       deviation apart. These results are NOT reliable.",
	"Total:      %5I64d %4I64d %5.1f %6I64d %7I64d",
	"Waiting:    %5I64d %4I64d %5.1f %6I64d %7I64d",
	"Processing: %5I64d %4I64d %5.1f %6I64d %7I64d",
	"Connect:    %5I64d %4I64d %5.1f %6I64d %7I64d",
	"              min  mean[+/-sd] median   max",
	"Connection Times (ms)",
							"%.2f kb/s total",
	"                        %.2f kb/s sent",
	"Transfer rate:          %.2f [Kbytes/sec] received",
	"Time per request:       %.3f [ms] (mean, across all concurrent requests)",
	"Time per request:       %.3f [ms] (mean)",
	"Requests per second:    %.2f [#/sec] (mean)",
	"HTML transferred:       %I64d bytes",
	"Total PUT:              %I64d",
	"Total POSTed:           %I64d",
	"Total transferred:      %I64d bytes",
	"Keep-Alive requests:    %d",
	"Non-2xx responses:      %d",
	"Write errors:           %d",
	"   (Connect: %d, Receive: %d, Length: %d, Exceptions: %d)",
	"Failed requests:        %d",
	"Complete requests:      %d",
	"Time taken for tests:   %.3f seconds",
	"Concurrency Level:      %d",
	"Document Length:        %u bytes",
	"Document Path:          %s",
	"Server Port:            %hu",
	"Server Hostname:        %s",
	"Server Software:        %s",
	"</table>",
	"<tr %s><th %s>Total:</th><td %s>%5I64d</td><td %s>%5I64d</td><td %s>%5I64d</td></tr>",
	"<tr %s><th %s>Processing:</th><td %s>%5I64d</td><td %s>%5I64d</td><td %s>%5I64d</td></tr>",
	"<tr %s><th %s>Connect:</th><td %s>%5I64d</td><td %s>%5I64d</td><td %s>%5I64d</td></tr>",
	"<tr %s><th %s>&nbsp;</th> <th %s>min</th>   <th %s>avg</th>   <th %s>max</th></tr>",
	"<tr %s><th %s colspan=4>Connnection Times (ms)</th></tr>",
	"<tr %s><td colspan=2 %s>&nbsp;</td><td colspan=2 %s>%.2f kb/s total</td></tr>",
	"<tr %s><td colspan=2 %s>&nbsp;</td><td colspan=2 %s>%.2f kb/s sent</td></tr>",
	"<tr %s><th colspan=2 %s>Transfer rate:</th><td colspan=2 %s>%.2f kb/s received</td></tr>",
	"<tr %s><th colspan=2 %s>Requests per second:</th><td colspan=2 %s>%.2f</td></tr>",
	"<tr %s><th colspan=2 %s>HTML transferred:</th><td colspan=2 %s>%I64d bytes</td></tr>",
	"<tr %s><th colspan=2 %s>Total PUT:</th><td colspan=2 %s>%I64d</td></tr>",
	"<tr %s><th colspan=2 %s>Total POSTed:</th><td colspan=2 %s>%I64d</td></tr>",
	"<tr %s><th colspan=2 %s>Total transferred:</th><td colspan=2 %s>%I64d bytes</td></tr>",
	"<tr %s><th colspan=2 %s>Keep-Alive requests:</th><td colspan=2 %s>%d</td></tr>",
	"<tr %s><th colspan=2 %s>Non-2xx responses:</th><td colspan=2 %s>%d</td></tr>",
	"<tr %s><td colspan=4 %s >   (Connect: %d, Length: %d, Exceptions: %d)</td></tr>",
	"<tr %s><th colspan=2 %s>Failed requests:</th><td colspan=2 %s>%d</td></tr>",
	"<tr %s><th colspan=2 %s>Complete requests:</th><td colspan=2 %s>%d</td></tr>",
	"<tr %s><th colspan=2 %s>Time taken for tests:</th><td colspan=2 %s>%.3f seconds</td></tr>",
	"<tr %s><th colspan=2 %s>Concurrency Level:</th><td colspan=2 %s>%d</td></tr>",
	"<tr %s><th colspan=2 %s>Document Length:</th><td colspan=2 %s>%u bytes</td></tr>",
	"<tr %s><th colspan=2 %s>Document Path:</th><td colspan=2 %s>%s</td></tr>",
	"<tr %s><th colspan=2 %s>Server Port:</th><td colspan=2 %s>%hu</td></tr>",
	"<tr %s><th colspan=2 %s>Server Hostname:</th><td colspan=2 %s>%s</td></tr>",
	"<tr %s><th colspan=2 %s>Server Software:</th><td colspan=2 %s>%s</td></tr>",
	"<table %s>",
	"socket receive buffer",
	"socket send buffer",
	"socket nonblock",
	"socket",
	"Completed %d requests",
	"Content-length:",
	"Content-Length:",
	"keep-alive",
	"Keep-Alive",
	"LOG: Response code = %s",
	"WARNING: Response code not 2xx (%s)",
	"HTTP",
	"Server:",
	"LOG: header received:",
	"apr_socket_recv",
	"</p>",
	" Licensed to The Apache Software Foundation, http://www.apache.org/<br>",
	" Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/<br>",
	" This is ApacheBench, Version %s <i>&lt;%s&gt;</i><br>",
	"$Revision: 655654 $",
	"Licensed to The Apache Software Foundation, http://www.apache.org/",
	"Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/",
	"This is ApacheBench, Version %s",
	"2.3 <$Revision: 655654 $>",
	"    -h              Display usage information (this message)",
	"    -r              Don't exit on socket receive errors.",
	"    -e filename     Output CSV file with percentages served",
	"    -g filename     Output collected data to gnuplot format file.",
	"    -S              Do not show confidence estimators and warnings.",
	"    -d              Do not show percentiles served table.",
	"    -k              Use HTTP KeepAlive feature",
	"    -V              Print version number and exit",
	"    -X proxy:port   Proxyserver and port number to use",
	"    -P attribute    Add Basic Proxy Authentication, the attributes",
	"                    are a colon separated username and password.",
	"    -A attribute    Add Basic WWW Authentication, the attributes",
	"                    Inserted after all normal header lines. (repeatable)",
	"    -H attribute    Add Arbitrary header line, eg. 'Accept-Encoding: gzip'",
	"    -C attribute    Add cookie, eg. 'Apache=1234. (repeatable)",
	"    -z attributes   String to insert as td or th attributes",
	"    -y attributes   String to insert as tr attributes",
	"    -x attributes   String to insert as table attributes",
	"    -i              Use HEAD instead of GET",
	"    -w              Print out results in HTML tables",
	"    -v verbosity    How much troubleshooting info to print",
	"                    Default is 'text/plain'",
	"                    'application/x-www-form-urlencoded'",
	"    -T content-type Content-type header for POSTing, eg.",
	"    -u putfile      File containing data to PUT. Remember also to set -T",
	"    -p postfile     File containing data to POST. Remember also to set -T",
	"    -b windowsize   Size of TCP send/receive buffer, in bytes",
	"    -t timelimit    Seconds to max. wait for responses",
	"    -c concurrency  Number of multiple requests to make",
	"    -n requests     Number of requests to perform",
	"Options are:",
	"Usage: %s [options] [http://]hostname[:port]/path",
	"SSL not compiled in; no https support",
	"https://",
	"[%s]",
	"http://",
	"ab: Could not read POST data file: %s",
	"ab: Could not allocate POST data buffer",
	"ab: Could not stat POST data file (%s): %s",
	"ab: Could not open POST data file (%s): %s",
	"apr_global_pool",
	"%d.%d%c",
	"****",
	"%3d%c",
	"%3d",
	"  -",
	"KMGTPE",
	"%s: illegal option -- %c",
	"%s: option requires an argument -- %c",
	"CommandLineToArgvW",
	"apr_initialize",
	"0123456789.",
	"0.0.0.0",
	"bogus %p",
	"I64d",
	"No host data of that type was found",
	"Host not found",
	"Graceful shutdown in progress",
	"WSAStartup not yet called",
	"Winsock version out of range",
	"Network system is unavailable",
	"Too many levels of remote in path",
	"Stale NFS file handle",
	"Disc quota exceeded",
	"Too many users",
	"Too many processes",
	"Directory not empty",
	"No route to host",
	"Host is down",
	"File name too long",
	"Too many levels of symbolic links",
	"Connection refused",
	"Connection timed out",
	"Too many references, can't splice",
	"Can't send after socket shutdown",
	"Socket is not connected",
	"Socket is already connected",
	"No buffer space available",
	"Connection reset by peer",
	"Software caused connection abort",
	"Net connection reset",
	"Network is unreachable",
	"Network is down",
	"Can't assign requested address",
	"Address already in use",
	"Address family not supported",
	"Protocol family not supported",
	"Operation not supported on socket",
	"Socket type not supported",
	"Protocol not supported",
	"Bad protocol option",
	"Protocol wrong type for socket",
	"Message too long",
	"Destination address required",
	"Socket operation on non-socket",
	"Operation already in progress",
	"Operation now in progress",
	"Operation would block",
	"Too many open sockets",
	"Invalid argument",
	"Bad address",
	"Permission denied",
	"Bad file number",
	"Interrupted system call",
	"APR does not understand this error code",
	"Error string not specified yet",
	"passwords do not match",
	"This function has not been implemented on this platform",
	"There is no error, this value signifies an initialized error code",
	"Shared memory is implemented using a key system",
	"Shared memory is implemented using files",
	"Shared memory is implemented anonymously",
	"Could not find specified socket in poll list.",
	"End of file found",
	"Missing parameter for the specified command line option",
	"Bad character specified on command line",
	"Partial results are valid but processing is incomplete",
	"The timeout specified has expired",
	"The specified child process is not done executing",
	"The specified child process is done executing",
	"The specified thread is not detached",
	"The specified thread is detached",
	"Your code just forked, and you are currently executing in the parent process",
	"Your code just forked, and you are currently executing in the child process",
	"Internal error",
	"The process is not recognized.",
	"The given path contained wildcard characters",
	"The given path is misformatted or contained invalid characters",
	"The given path was above the root path",
	"The given path is incomplete",
	"The given path is relative",
	"The given path is absolute",
	"The specified network mask is invalid.",
	"The specified IP address is invalid.",
	"DSO load failed",
	"No shared memory is currently available",
	"No thread key structure was provided and one was required.",
	"No thread was provided and one was required.",
	"No socket was provided and one was required.",
	"No poll structure was provided and one was required.",
	"No lock was provided and one was required.",
	"No directory was provided and one was required.",
	"No time was provided and one was required.",
	"No process was provided and one was required.",
	"An invalid socket was returned",
	"An invalid date has been provided",
	"A new pool could not be created.",
	"Unrecognized Win32 error code %d",
	"CancelIo",
	"GetCompressedFileSizeA",
	"GetCompressedFileSizeW",
	"ZwQueryInformationFile",
	"GetSecurityInfo",
	"GetNamedSecurityInfoA",
	"GetNamedSecurityInfoW",
	"GetEffectiveRightsFromAclW",
	"ntdll.dll",
	"shell32",
	"ws2_32",
	"mswsock",
	"advapi32",
	"kernel32",
	"`h1`A",
	"h:`A",
	"kernel32",
	"CreateThread",
	"[REU",
	"!This program cannot be run in DOS mode.",
	"Rich",
	".text",
	"`.rdata",
	"tanh",
	"asin",
	"acos",
	"atan",
	"atan2",
	"sqrt",
	"ceil",
	"floor",
	"fabs",
	"modf",
	"ldexp",
	"_cabs",
	"_hypot",
	"fmod",
	"frexp",
	"_logb",
	"_nextafter",
	"log10",
	"sinh",
	"cosh",
	"e+000",
	"FlsAlloc",
	"FlsFree",
	"FlsGetValue",
	"FlsSetValue",
	"InitializeCriticalSectionEx",
	"CreateEventExW",
	"CreateSemaphoreExW",
	"SetThreadStackGuarantee",
	"CreateThreadpoolTimer",
	"SetThreadpoolTimer",
	"WaitForThreadpoolTimerCallbacks",
	"CloseThreadpoolTimer",
	"CreateThreadpoolWait",
	"SetThreadpoolWait",
	"CloseThreadpoolWait",
	"FlushProcessWriteBuffers",
	"FreeLibraryWhenCallbackReturns",
	"GetCurrentProcessorNumber",
	"GetLogicalProcessorInformation",
	"CreateSymbolicLinkW",
	"SetDefaultDllDirectories",
	"EnumSystemLocalesEx",
	"CompareStringEx",
	"GetDateFormatEx",
	"GetLocaleInfoEx",
	"GetTimeFormatEx",
	"GetUserDefaultLocaleName",
	"IsValidLocaleName",
	"LCMapStringEx",
	"GetCurrentPackageId",
	"GetTickCount64",
	"GetFileInformationByHandleExW",
	"SetFileInformationByHandleW",
	"MessageBoxW",
	"GetActiveWindow",
	"GetLastActivePopup",
	"GetUserObjectInformationW",
	"GetProcessWindowStation",
	" !\"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\]^_`abcdefghijklmnopqrstuvwxyz{|}~",
	" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`ABCDEFGHIJKLMNOPQRSTUVWXYZ{|}~",
	"metsrv.x86.dll",
	"_ReflectiveLoader@0",
	"WSADuplicateSocketA",
	"getaddrinfo",
	"freeaddrinfo",
	"WS2_32.dll",
	"CryptDecodeObjectEx",
	"CryptImportPublicKeyInfo",
	"CryptStringToBinaryA",
	"CertGetCertificateContextProperty",
	"CRYPT32.dll",
	"InternetCrackUrlW",
	"InternetOpenW",
	"InternetCloseHandle",
	"InternetConnectW",
	"InternetReadFile",
	"InternetSetOptionW",
	"HttpOpenRequestW",
	"HttpSendRequestW",
	"HttpQueryInfoW",
	"WININET.dll",
	"WinHttpCrackUrl",
	"WinHttpOpen",
	"WinHttpCloseHandle",
	"WinHttpConnect",
	"WinHttpReadData",
	"WinHttpQueryOption",
	"WinHttpSetOption",
	"WinHttpOpenRequest",
	"WinHttpSendRequest",
	"WinHttpReceiveResponse",
	"WinHttpQueryHeaders",
	"WinHttpGetProxyForUrl",
	"WinHttpGetIEProxyConfigForCurrentUser",
	"WINHTTP.dll",
	"VirtualAllocEx",
	"OpenProcess",
	"GetCurrentProcess",
	"GetLastError",
	"WriteProcessMemory",
	"CloseHandle",
	"DuplicateHandle",
	"CreateEventW",
	"FreeLibrary",
	"GetProcAddress",
	"VirtualAlloc",
	"VirtualFree",
	"VirtualQueryEx",
	"OpenThread",
	"SetLastError",
	"SuspendThread",
	"ResumeThread",
	"Sleep",
	"LoadLibraryA",
	"GetVersionExW",
	"CreateToolhelp32Snapshot",
	"Thread32First",
	"Thread32Next",
	"FlushInstructionCache",
	"VirtualProtect",
	"VirtualQuery",
	"LoadLibraryW",
	"GetModuleHandleA",
	"ExitProcess",
	"SetUnhandledExceptionFilter",
	"ExitThread",
	"GetSystemTime",
	"SystemTimeToFileTime",
	"GetModuleHandleW",
	"LocalFree",
	"WriteFile",
	"GetSystemDirectoryW",
	"CreateFileA",
	"GetVolumeInformationW",
	"GetComputerNameW",
	"CreateRemoteThread",
	"GetThreadId",
	"WaitForMultipleObjects",
	"LocalAlloc",
	"GetOverlappedResult",
	"ResetEvent",
	"ReadFile",
	"ConnectNamedPipe",
	"CreateNamedPipeA",
	"GetCurrentProcessId",
	"GetCurrentThreadId",
	"SetHandleInformation",
	"SetNamedPipeHandleState",
	"PeekNamedPipe",
	"CreateFileW",
	"CreateNamedPipeW",
	"GlobalFree",
	"CreateThread",
	"TerminateThread",
	"SetEvent",
	"ReleaseMutex",
	"WaitForSingleObject",
	"CreateMutexW",
	"MultiByteToWideChar",
	"WideCharToMultiByte",
	"KERNEL32.dll",
	"GetThreadDesktop",
	"GetProcessWindowStation",
	"GetUserObjectInformationW",
	"USER32.dll",
	"ImpersonateLoggedOnUser",
	"OpenProcessToken",
	"AdjustTokenPrivileges",
	"LookupPrivilegeValueW",
	"CryptAcquireContextW",
	"CryptReleaseContext",
	"CryptDestroyKey",
	"CryptSetKeyParam",
	"CryptGenRandom",
	"CryptImportKey",
	"CryptEncrypt",
	"CryptDecrypt",
	"CryptDuplicateKey",
	"AllocateAndInitializeSid",
	"InitializeAcl",
	"InitializeSecurityDescriptor",
	"SetSecurityDescriptorDacl",
	"SetSecurityDescriptorSacl",
	"SetEntriesInAclW",
	"OpenThreadToken",
	"ADVAPI32.dll",
	"CoCreateGuid",
	"ole32.dll",
	"VirtualProtectEx",
	"HeapFree",
	"HeapAlloc",
	"HeapReAlloc",
	"GetSystemTimeAsFileTime",
	"GetCommandLineA",
	"GetProcessHeap",
	"GetModuleHandleExW",
	"GetStdHandle",
	"GetModuleFileNameW",
	"IsProcessorFeaturePresent",
	"RtlUnwind",
	"IsDebuggerPresent",
	"IsValidCodePage",
	"GetACP",
	"GetOEMCP",
	"GetCPInfo",
	"RaiseException",
	"GetFileType",
	"DeleteCriticalSection",
	"GetStartupInfoW",
	"GetModuleFileNameA",
	"QueryPerformanceCounter",
	"GetEnvironmentStringsW",
	"FreeEnvironmentStringsW",
	"UnhandledExceptionFilter",
	"InitializeCriticalSectionAndSpinCount",
	"TerminateProcess",
	"TlsAlloc",
	"TlsGetValue",
	"TlsSetValue",
	"TlsFree",
	"EnterCriticalSection",
	"LeaveCriticalSection",
	"LoadLibraryExW",
	"OutputDebugStringW",
	"GetStringTypeW",
	"LCMapStringW",
	"GetConsoleCP",
	"GetConsoleMode",
	"SetFilePointerEx",
	"HeapSize",
	"SetStdHandle",
	"WriteConsoleW",
	"FlushFileBuffers",
	"[%x]",
	"core_console_write",
	"core_channel_open",
	"core_channel_write",
	"core_channel_close",
	"core_channel_read",
	"core_channel_seek",
	"core_channel_eof",
	"core_channel_tell",
	"core_channel_interact",
	"core_negotiate_tlv_encryption",
	"core_transport_set_timeouts",
	"core_transport_getcerthash",
	"core_transport_setcerthash",
	"core_transport_list",
	"core_transport_sleep",
	"core_transport_change",
	"core_transport_next",
	"core_transport_prev",
	"core_transport_add",
	"core_transport_remove",
	"core_migrate",
	"core_shutdown",
	"[%x]",
	"[%x]",
	"AQAPRQVH1",
	"JJM1",
	"RAQH",
	"AXAX^YZAXAYAZH",
	"XAYZH",
	"AQAQI",
	";}$u",
	"D$$[[aYZQ",
	"6QQh8h",
	"AQAPRQVH1",
	"JJM1",
	"RAQH",
	"AXAX^YZAXAYAZH",
	"XAYZH",
	"B0H9",
	"ntdll",
	"NtQueueApcThread",
	"[%x]",
	"core_channel_write",
	"core_channel_open",
	"core_channel_open",
	"core_channel_read",
	"core_channel_write",
	"core_channel_close",
	"core_channel_interact",
	"core_channel_open",
	"core_channel_read",
	"core_channel_write",
	"core_channel_close",
	"core_channel_interact",
	"[%x]",
	"[%x]",
	"NtMapViewOfSection",
	"NtQueryAttributesFile",
	"NtOpenFile",
	"NtCreateSection",
	"NtOpenSection",
	"NtClose",
	"ntdll",
	"NtMapViewOfSection",
	"NtQueryAttributesFile",
	"NtOpenFile",
	"NtCreateSection",
	"NtOpenSection",
	"NtClose",
	"NtLockVirtualMemory",
	"ntdll",
	"[%x]",
	"[%x]",
	"[%x]",
	"[%x]",
	"[%x]",
	"[%x]",
	"[%x]",
	"core_loadlib",
	"core_enumextcmd",
	"core_machine_id",
	"core_get_session_guid",
	"core_set_session_guid",
	"core_set_uuid",
	"core_pivot_add",
	"core_pivot_remove",
	"core_patch_url",
	"[%x]",
	"InitServerExtension",
	"DeinitServerExtension",
	"GetExtensionName",
	"CommandAdded",
	"StagelessInit",
	"InitServerExtension",
	"DeinitServerExtension",
	"GetExtensionName",
	"CommandAdded",
	"StagelessInit",
	"[%x]",
	"RtlCreateUserThread",
	"ntdll",
	"[%x]",
	"[%x]",
	"core_pivot_session_new",
	"[%x]",
	"core_pivot_session_died",
	"core_get_session_guid",
	"\\%s\pipe\%s",
	"advapi32.dll",
	"AddMandatoryAce",
	"[%x]",
	"kernel32.dll",
	"ProcessIdToSessionId",
	"[%x]",
	"[%x]",
	"[%x]",
	"PACKET TRANSMIT",
	"PACKET RECEIVE",
	"[%x]",
	"kernel32.dll",
	"OpenThread",
	"ntdll.dll",
	"NtOpenThread",
	"kernel32.dll",
	"SetThreadErrorMode",
	"[%x]",
	"[%x]",
	" inflate 1.0.4 Copyright 1995-1996 Mark Adler",
	"[%x]",
	"oversubscribed dynamic bit lengths tree",
	"incomplete dynamic bit lengths tree",
	" deflate 1.0.4 Copyright 1995-1996 Jean-loup Gailly",
	"oversubscribed literal/length tree",
	"incomplete literal/length tree",
	"oversubscribed distance tree",
	"incomplete distance tree",
	"empty distance tree with lengths",
	"1.0.4P",
	"invalid literal/length code",
	"invalid distance code",
	"invalid distance code",
	"invalid literal/length code",
	"need dictionary",
	"stream end",
	"file error",
	"1.0.4P",
	"stream error",
	"data error",
	"insufficient memory",
	"buffer error",
	"incompatible version",
	"1.0.4P",
	"unknown compression method",
	"invalid window size",
	"incorrect header check",
	"need dictionary",
	"1.0.4P",
	"incorrect data check",
	"need more for packet flush",
	"1.0.4P",
	"invalid block type",
	"invalid stored block lengths",
	"too many length or distance symbols",
	"invalid bit length repeat",
	"",
	"abcdefghijklmnopqrstuvwxyz",
	"ABCDEFGHIJKLMNOPQRSTUVWXYZ",
	"",
	"abcdefghijklmnopqrstuvwxyz",
	"ABCDEFGHIJKLMNOPQRSTUVWXYZ",
	"kU'9",
	"HMXB",
	"?Zd;",
	"?/L[",
	"S;uD",
	"z?aUY",
	"D?$?",
	"U>c{",
	"zc%C1",
	".:3q",
	"-64OS",
	"NKeb",
	"1I3W3|3",
	"5$686",
	"=#=2=>=",
	">\">?>`>",
	"6#7<7x7",
	"858K8g8t8",
	"9=9K9R9",
	":(:d:n:",
	":$;<;",
	"<.<|<",
	"3M3h3",
	"315G5f5",
	"5(6F6^6",
	"8 9+9",
	":4;_<",
	"<*=\>b>R?[?",
	"%0x0T1`1",
	"4$4/4:4G4V4d4j4p4",
	"6 6D6|6",
	"7&737@7P7u7",
	"8#878J8X8h8n8",
	">Y>t>",
	"2)363=3_3x3",
	"4,4@4Y4",
	"4R5\5i5",
	"6.747:7C7M7",
	"9A9Q9X9k9",
	"9B:Q:b:|:2>8>n>.?:?",
	"0%010R0a0",
	"1K1P1a1",
	"2!2>2",
	"5:5D5Z5q5",
	"626f6",
	"627~7",
	"8A8e8",
	";!;&;d<",
	"=2=[=",
	">A>m>",
	"3,3i3",
	"384B4d4i4",
	"5V5]5c5",
	"52696j7q7w7",
	"7@8_8",
	"=)>8>h>s>|>",
	">       ?4?",
	"&040o0",
	"2#2*21282?2F2[2b2",
	"3$333C3",
	"474c4o4",
	"5!5/5\5h5",
	"7?8_8e8",
	":$;q;",
	"=,===h=",
	">6>E>T>",
	">#?3?]?",
	"0:0~0",
	"0n1z2",
	"8D9K9R9Y9`9g9",
	":(:D:S:Z:q:",
	";<<C<J<Q<X<_<",
	"<       =4=U=t=",
	"=6>=>",
	"?6?U?}?",
	"#0U0m0",
	"4s5|6",
	"6.:4:V:`:m:z:v<",
	"E0w0",
	"1 2>2J2",
	"3F5_5",
	"5[6q6",
	"242>2K2c2p2z2",
	"313S3m3",
	"3J4U4",
	"7Y8;;s;",
	"0 0$0(0",
	"2;2Z2_2",
	"3/3D3",
	"4!4+454?4",
	"6w7-8",
	"0\0i0",
	"2&3,323",
	"4F4v4",
	":5:<:@:D:H:L:P:T:X:",
	";%;@;G;L;P;T;u;",
	";><D<H<L<P<Q>",
	"1'1D2J2V2",
	"2/363L3V3%434",
	"4O5*6f6",
	":>:c:",
	"@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7",
	":+:9:",
	"<#<+<0<4<8<a<",
	"= =$=",
	">A>H>L>P>T>X>\>`>d>",
	"20=2M5",
	"7!868@8J8",
	"8;9P9j9",
	";=;L;T;];f;",
	"< <*<:<?<D<U<Z<k<p<}<",
	"=!=+=A=b=",
	">&>2>B>H>Y>x>",
	"?I?r?",
	"0-030H0Y0e0l0s0",
	"0(1M1[1r1}1",
	"2\"2<2[2p2z2",
	"3q3}3",
	"5O6`6g6u6",
	"8&8+878C8",
	"=#>9>r>",
	">(?/?6?=?U?d?n?{?",
	"2 2K2",
	"3(3?3Y3t3|3",
	"3.4d4w4",
	"5;5b5",
	"7_7y7",
	"8*8O8",
	"9)9B9S9a9k9q9",
	";g<|<",
	"0R2X2~2",
	"2D4n6r6v6z6~6",
	"8-8C8Y8a8",
	"85;^;",
	"0#0c0",
	"1$1y1",
	"2E2e2",
	"20353",
	"5[5g5s5",
	"5.666G6{6",
	"7#7-737E7O7U7p7",
	"8$8)8/878<8B8J8O8U8]8b8h8p8u8{8",
	"9 9&9.93999A9F9L9T9Y9_9g9l9r9z9",
	":%:*:0:8:>:L:Z:a:n:w:",
	":-;B;Y;^;y;~;",
	">*>Q>",
	"?v?{?",
	"r0w0|0",
	"0[1`1i1u1z1",
	"2r2w2",
	"2A3K3f3p3",
	"4^5f5k5",
	"6 6&6,646:6@6H6N6T6\6e6l6t6}6",
	"7,7E7p7",
	"8,8>8P8b8",
	"<D=3>",
	"0P0V0\0b0h0n0u0|0",
	"1$1M1v1",
	"1d2~2",
	"3;3l3y3",
	"4/4T4",
	"8t8}8Z9e9x9",
	"9N:W:c;l;X<",
	"<-=d=",
	"?\?g?",
	"G0c0I2T2d2",
	";/;_;",
	"`1f1",
	"7#7T7",
	"9D:K:q:x:",
	";0;~>k?",
	"10161",
	"5#5'5%717<8",
	"9\":-:O:",
	";0;7;^;k;p;~;",
	"<E<[<n<",
	"<;=D=O=^=}=",
	">-?5?",
	"0o1{1   2",
	"7*8A8{8",
	"9c<u<",
	"0       1*1b1",
	";%?,?",
	"0#0-0",
	"0m1~1",
	"4B5H5",
	"3 3P3\3h3t3",
	"7$7,747<7D7L7T7\7d7l7t7|7",
	"l1p1t1x1",
	"3$3,343<3D3L3T3\3d3l3t3|3",
	"4$4,444<4D4L4T4\4d4l4t4|4",
	"5$5,545<5D5L5T5\5d5l5t5|5",
	"6$6,646<6D6L6T6\6d6l6t6|6",
	"7$7,747<7D7L7T7\7d7l7t7|7",
	"8$8,848<8D8L8T8\8d8l8t8|8",
	"9$9,949<9D9L9T9\9d9l9t9|9",
	": :(:0:8:@:H:P:X:`:h:p:x:",
	"; ;(;0;8;@;H;P;X;`;h;p;x;",
	"< <(<0<8<@<H<P<X<`<h<p<x<",
	"= =(=0=8=@=H=P=X=`=h=p=x=",
	"> >(>0>8>@>H>P>X>`>h>p>x>",
	"? ?(?0?8?@?H?P?X?`?h?p?x?",
	"0 0(00080@0H0P0X0`0h0p0x0",
	"1 1(1",
	",404d4h4t4x4",
	"5$5(5H5h5",
	"686T6X6x6",
	"787D7`7",
	"1X1\1",
	"2D3H3",
	"40545",
	"5x6|6",
	"7d8h8",
	"9P:X:",
	";<<@<",
	"(7074787<7@7D7H7L7P7T7X7\7`7d7h7l7p7t7x7|7",
	"8 8$8(8,8084888<8@8D8H8L8P8T8X8\8`8d8h8l8p8t8x8|8",
	";l<p<",
	"=X>\>",
	"D0H0",
	"648@8L8X8d8p8|8",
	"4 4$4(44484<4@4D4H4L4P4T4X4\4`4d4h4l4p4t4x4|4",
	"5,5<5L5l5x5|5",
	"6$6,646<6D6L6T6\6d6l6t6|6",
	"6@8H8L8P8T8X8\8`8d8h8l8x8|8",
	"MSVCRT.dll",
	"_iob",
	"_except_handler3",
	"__set_app_type",
	"__p__fmode",
	"__p__commode",
	"_adjust_fdiv",
	"__setusermatherr",
	"_initterm",
	"__getmainargs",
	"__p___initenv",
	"_XcptFilter",
	"_exit",
	"_onexit",
	"__dllonexit",
	"strrchr",
	"wcsncmp",
	"_close",
	"wcslen",
	"wcscpy",
	"strerror",
	"modf",
	"strspn",
	"realloc",
	"__p__environ",
	"__p__wenviron",
	"_errno",
	"free",
	"strncmp",
	"strstr",
	"strncpy",
	"_ftol",
	"qsort",
	"fopen",
	"perror",
	"fclose",
	"fflush",
	"calloc",
	"malloc",
	"signal",
	"printf",
	"_isctype",
	"atoi",
	"exit",
	"__mb_cur_max",
	"_pctype",
	"strchr",
	"fprintf",
	"_controlfp",
	"_strdup",
	"_strnicmp",
	"KERNEL32.dll",
	"PeekNamedPipe",
	"ReadFile",
	"WriteFile",
	"LoadLibraryA",
	"GetProcAddress",
	"GetVersionExA",
	"GetExitCodeProcess",
	"TerminateProcess",
	"LeaveCriticalSection",
	"SetEvent",
	"ReleaseMutex",
	"EnterCriticalSection",
	"DeleteCriticalSection",
	"InitializeCriticalSection",
	"CreateMutexA",
	"GetFileType",
	"SetLastError",
	"FreeEnvironmentStringsW",
	"GetEnvironmentStringsW",
	"GlobalFree",
	"GetCommandLineW",
	"TlsAlloc",
	"TlsFree",
	"DuplicateHandle",
	"GetCurrentProcess",
	"SetHandleInformation",
	"CloseHandle",
	"GetSystemTimeAsFileTime",
	"FileTimeToSystemTime",
	"GetTimeZoneInformation",
	"FileTimeToLocalFileTime",
	"SystemTimeToFileTime",
	"SystemTimeToTzSpecificLocalTime",
	"Sleep",
	"FormatMessageA",
	"GetLastError",
	"WaitForSingleObject",
	"CreateEventA",
	"SetStdHandle",
	"SetFilePointer",
	"CreateFileA",
	"CreateFileW",
	"GetOverlappedResult",
	"DeviceIoControl",
	"GetFileInformationByHandle",
	"LocalFree",
	"ADVAPI32.dll",
	"FreeSid",
	"AllocateAndInitializeSid",
	"WSOCK32.dll",
	"WS2_32.dll",
	"WSARecv",
	"WSASend" };
///////////////////////////////////////////////////////////////////////////////////////////////////////////













	//loop through windowsLocalEnum commands	
	for (int i = 0; i < sizeof(windowsLocalEnum) / sizeof(windowsLocalEnum[0]);i++) {
		string command = "cmd /c " + windowsLocalEnum[i];
		system(command.c_str());}
	
	
	//find public IP
	string publicIP = HttpRequestExtended(L"https://api.ipify.org");
	cout << "Public IP: " + publicIP<<endl;
	
	
		
	//write eicar file to disk
	string eicarFileContent = HttpRequestExtended(L"https://secure.eicar.org/eicar.com");
	ofstream myfile;
	myfile.open("evil.com");
	myfile << eicarFileContent;
	myfile.close();

	system("PAUSE");
	return 0;
}


//Our lovely extended function
string HttpRequestExtended(wstring url) {

	struct Uri
	{
	public:
		wstring QueryString, Path, Protocol, Host, Port;

		static Uri Parse(const wstring& uri)
		{
			Uri result;
			typedef wstring::const_iterator iterator_t;
			if (uri.length() == 0)
				return result;

			iterator_t uriEnd = uri.end();

			// get query start
			iterator_t queryStart = std::find(uri.begin(), uriEnd, L'?');

			// protocol
			iterator_t protocolStart = uri.begin();
			iterator_t protocolEnd = std::find(protocolStart, uriEnd, L':');            //"://");

			if (protocolEnd != uriEnd)
			{
				wstring prot = &*(protocolEnd);
				if ((prot.length() > 3) && (prot.substr(0, 3) == L"://"))
				{
					result.Protocol = wstring(protocolStart, protocolEnd);
					protocolEnd += 3;   //      ://
				}
				else
					protocolEnd = uri.begin();  // no protocol
			}
			else
				protocolEnd = uri.begin();  // no protocol

			// host
			iterator_t hostStart = protocolEnd;
			iterator_t pathStart = std::find(hostStart, uriEnd, L'/');  // get pathStart

			iterator_t hostEnd = std::find(protocolEnd,
				(pathStart != uriEnd) ? pathStart : queryStart,
				L':');  // check for port

			result.Host = wstring(hostStart, hostEnd);

			// port
			if ((hostEnd != uriEnd) && ((&*(hostEnd))[0] == L':'))  // we have a port
			{
				hostEnd++;
				iterator_t portEnd = (pathStart != uriEnd) ? pathStart : queryStart;
				result.Port = wstring(hostEnd, portEnd);
			}

			// path
			if (pathStart != uriEnd)
				result.Path = wstring(pathStart, queryStart);

			// query
			if (queryStart != uriEnd)
				result.QueryString = wstring(queryStart, uri.end());

			return result;

		}   // Parse
	};  // uri


	Uri u0 = Uri::Parse(url);
	//wcout << u0.Protocol << std::endl;
	//wcout << u0.Host << std::endl;
	//wcout << u0.Port << std::endl;
	//wcout << u0.Path << std::endl;
	//wcout << u0.QueryString << std::endl;

	DWORD flags = INTERNET_FLAG_RELOAD
		| INTERNET_FLAG_NO_CACHE_WRITE
		| INTERNET_FLAG_KEEP_CONNECTION
		| INTERNET_FLAG_NO_AUTO_REDIRECT
		| INTERNET_FLAG_NO_UI;

	if (u0.Protocol == L"https")
		{
			flags |= INTERNET_FLAG_SECURE
				| INTERNET_FLAG_IGNORE_CERT_CN_INVALID
				| INTERNET_FLAG_IGNORE_CERT_DATE_INVALID;
	}



	//HINTERNET hInternet = InternetOpenW(L"YourUserAgent", INTERNET_OPEN_TYPE_DIRECT, NULL, NULL, 0); //you should perhaps edit your useragent ? :p
	HINTERNET hInternet = InternetOpenW(L"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.66 Safari/537.36 Edg/87.0.664.41", 
		INTERNET_OPEN_TYPE_PRECONFIG, NULL, NULL, 0); //you should perhaps edit your useragent ? :p


	if (hInternet == NULL)
	{
		return "InternetOpenW failed(hInternet): " + GetLastError();
	}
	else
	{
		// convert str to const wchar_t as the args require!
		wstring widestr;
		for (int i = 0; i < u0.Host.length(); ++i)
		{
			widestr += wchar_t(u0.Host[i]);
		}
		const wchar_t* host_name = widestr.c_str();

		wstring path_and_params;
		path_and_params = u0.Path + u0.QueryString;
		wstring widestr2;
		for (int i = 0; i < path_and_params.length(); ++i)
		{
			widestr2 += wchar_t(path_and_params[i]);
		}
		const wchar_t* site_param = widestr2.c_str();
		//convert str to const wchar_t as the args require!


		
		int port;
		if (u0.Protocol == L"https")
		{
			if (u0.Port == L"")	{ port = 443; } //default port for https
			else { wstringstream convStream; convStream << u0.Port; convStream >> port; } // convert wstr to int as the port arg requires!
		}
		else 
		{
			if (u0.Port == L"")	{ port = 80; } //default port for http
			else { wstringstream convStream; convStream << u0.Port; convStream >> port;	} // convert wstr to int as the port arg requires!
		}




		HINTERNET hConnect = InternetConnectW(hInternet, host_name, port, NULL, NULL, INTERNET_SERVICE_HTTP, 0, NULL);

		if (hConnect == NULL)
		{
			return "InternetConnectW failed(hConnect == NULL): " + GetLastError();
		}
		else
		{
			const wchar_t* parrAcceptTypes[] = { L"text/*", NULL }; // accepted types. We'll choose text.

			HINTERNET hRequest = HttpOpenRequestW(hConnect, L"GET", site_param, NULL, NULL, parrAcceptTypes, flags, 0);

			if (hRequest == NULL)
			{
				return "HttpOpenRequestW failed(hRequest == NULL): " + GetLastError();
			}
			else
			{
				
				if (u0.Protocol == L"https")
				{
					DWORD secureFlags = SECURITY_FLAG_IGNORE_CERT_CN_INVALID
						| SECURITY_FLAG_IGNORE_CERT_DATE_INVALID
						| SECURITY_FLAG_IGNORE_WRONG_USAGE
						| SECURITY_FLAG_IGNORE_UNKNOWN_CA
						| SECURITY_FLAG_IGNORE_REVOCATION;

					if (!InternetSetOptionW(hRequest, INTERNET_OPTION_SECURITY_FLAGS, &secureFlags, sizeof(secureFlags)))
					{
						return "InternetSetToption Failed: " + GetLastError();
					}

				}
				
				BOOL bRequestSent = HttpSendRequestW(hRequest, NULL, 0, NULL, 0);

				if (!bRequestSent)
				{
					return "!bRequestSent    HttpSendRequestW failed with error code " + GetLastError();
				}
				else
				{
					std::string strResponse;
					const int nBuffSize = 1024;
					char buff[nBuffSize];

					BOOL bKeepReading = true;
					DWORD dwBytesRead = -1;

					while (bKeepReading && dwBytesRead != 0)
					{
						bKeepReading = InternetReadFile(hRequest, buff, nBuffSize, &dwBytesRead);
						strResponse.append(buff, dwBytesRead);
					}
					return strResponse;
				}
				InternetCloseHandle(hRequest);
			}
			InternetCloseHandle(hConnect);
		}
		InternetCloseHandle(hInternet);
	}

return "Dummy";}


